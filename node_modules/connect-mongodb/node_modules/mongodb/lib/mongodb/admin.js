/*!
 * Module dependencies.
 */
var Collection = require('./collection').Collection,
    Cursor = require('./cursor').Cursor,
    DbCommand = require('./commands/db_command').DbCommand,
    utils = require('./utils');

/**
 * Allows the user to access the admin functionality of MongoDB
 *
 * @class Represents the Admin methods of MongoDB.
 * @param {Object} db Current db instance we wish to perform Admin operations on.
 * @return {Function} Constructor for Admin type.
 */
function Admin(db) {
  if(!(this instanceof Admin)) return new Admin(db);

  /**
   * Retrieve the server information for the current
   * instance of the db client
   *
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from buildInfo or null if an error occured.
   * @return {null} Returns no result
   * @api public
   */
  this.buildInfo = function(callback) {
    this.serverInfo(callback);
  }

  /**
   * Retrieve the server information for the current
   * instance of the db client
   *
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from serverInfo or null if an error occured.
   * @return {null} Returns no result
   * @api private
   */
  this.serverInfo = function(callback) {
    db.executeDbAdminCommand({buildinfo:1}, function(err, doc) {
      if(err != null) return callback(err, null);
      return callback(null, doc.documents[0]);
    });
  }

  /**
   * Retrieve this db's server status.
   *
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from serverStatus or null if an error occured.
   * @return {null}
   * @api public
   */
  this.serverStatus = function(callback) {
    var self = this;

    db.executeDbAdminCommand({serverStatus: 1}, function(err, doc) {
      if(err == null && doc.documents[0].ok === 1) {
        callback(null, doc.documents[0]);
      } else {
        if(err) return callback(err, false);
        return callback(utils.toError(doc.documents[0]), false);
      }
    });
  };

  /**
   * Retrieve the current profiling Level for MongoDB
   *
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from profilingLevel or null if an error occured.
   * @return {null} Returns no result
   * @api public
   */
  this.profilingLevel = function(callback) {
    var self = this;

    db.executeDbAdminCommand({profile:-1}, function(err, doc) {
      doc = doc.documents[0];

      if(err == null && doc.ok === 1) {
        var was = doc.was;
        if(was == 0) return callback(null, "off");
        if(was == 1) return callback(null, "slow_only");
        if(was == 2) return callback(null, "all");
          return callback(new Error("Error: illegal profiling level value " + was), null);
      } else {
        err != null ? callback(err, null) : callback(new Error("Error with profile command"), null);
      }
    });
  };

  /**
   * Ping the MongoDB server and retrieve results
   *
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from ping or null if an error occured.
   * @return {null} Returns no result
   * @api public
   */
  this.ping = function(options, callback) {
    // Unpack calls
    var args = Array.prototype.slice.call(arguments, 0);
    db.executeDbAdminCommand({ping: 1}, args.pop());
  }

  /**
   * Authenticate against MongoDB
   *
   * @param {String} username The user name for the authentication.
   * @param {String} password The password for the authentication.
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from authenticate or null if an error occured.
   * @return {null} Returns no result
   * @api public
   */
  this.authenticate 